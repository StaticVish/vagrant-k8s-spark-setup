- name: Replace the DNS to 192.168.121.1
  lineinfile:
    path: /etc/systemd/resolved.conf
    regexp: "^DNS="
    line: "DNS=192.168.121.1"
    state: present
    backup: yes

- name: Restart systemd-resolved.service
  systemd:
    state: restarted
    daemon_reload: yes
    name: systemd-resolved

- name: Add an apt signing key for Kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Adding apt repository for Kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list

- name: Install packages that allow apt to be used over HTTPS
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - vim 
      - git 
      - curl 
      - wget 
      - kubelet 
      - kubeadm 
      - kubectl
      - network-manager

- name: Hold kubeadm
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - kubelet 
    - kubeadm 
    - kubectl

- name: Enable kubelet
  systemd:
    name: kubelet
    daemon_reload: yes
    enabled: yes
    state: stopped

- name: Remove swapfile from /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none

- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Add the Kernel module
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - overlay
    - br_netfilter

- name: Enable Sysctl Parameters
  sysctl:
    name: "{{ item }}"
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes
  with_items:
    - net.ipv4.ip_forward
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables

- name: Install the Dependencies Packages
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - curl
    - gnupg2
    - software-properties-common 
    - apt-transport-https 
    - ca-certificates

- name: Add an apt signing key for Docker
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Adding apt repository for Docker
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker.list      

- name: Install Containerd.io
  apt:
    name: containerd.io
    state: present
    update_cache: yes

- name: Ensure containerd config directory exists.
  file:
    path: /etc/containerd
    state: directory
  register: containerd_dir

- name: Get defaults from containerd.
  command: containerd config default
  changed_when: false
  register: containerd_config_default
  
- name: Prepare containerd/config.toml from default config
  copy:
    dest: /tmp/containerd_config.toml
    content: "{{ containerd_config_default.stdout }}"
  changed_when: false

- name: Set Cgroup driver to systemd
  lineinfile:
    insertafter: '.*\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]$'
    line: '          SystemdCgroup = true'
    state: present
    path: /tmp/containerd_config.toml
  changed_when: false

- name: Make sure  SystemdCgroup = false is not set
  ansible.builtin.lineinfile:
    path: /tmp/containerd_config.toml
    state: absent
    line: '            SystemdCgroup = false'
  notify: restart containerd
  changed_when: false

- name: Copy config.toml to /etc/containerd
  copy:
    remote_src: true
    src: /tmp/containerd_config.toml
    dest: /etc/containerd/config.toml
  notify: restart containerd
  

- name: Cleanup temporary file
  file:
    path: /tmp/containerd_config.toml
    state: absent
  changed_when: false

- name: Ensure containerd is restarted immediately if necessary.
  meta: flush_handlers

- name: Save the Ip Address of the master
  shell: |
    ip -4 addr show eth0 | grep "inet" | head -1 |awk '{print $2}' | cut -d/ -f1
  register: IPADDRESS

- name: Save the Hostname for the Master
  shell: |
    hostname --fqdn
  register: HOSTNAME

- name: Prepull Images
  command: >-
    kubeadm config images pull